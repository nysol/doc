# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, nysol
# This file is distributed under the same license as the nysol_python
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nysol_python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-23 12:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../mcmd/flow.rst:8
msgid "処理フロー"
msgstr ""

#: ../../mcmd/flow.rst:10
msgid ""
"mcmdでは、単一機能に特化した80以上の処理メソッドを自由に組み合わせることで、 "
"データ処理の複雑なフローを構築することができ、それらは並列で処理される。 このようなフロー全体のことを **データ処理フロー** もしくは単に "
"**処理フロー** と呼ぶ。 そして処理フローを扱うオブジェクトを **データ処理フローオブジェクト**  もしくは単に "
"**処理フローオブジェクト** と呼ぶ。 処理フローは、有向非循環グラフ( |DAG| :Directed Acyclic "
"Graph)で表される。 DAGの節点が処理メソッドに、そして有向辺がデータの流れに対応する。 :numref:`flow_dag.png` "
"はいずれもDAGで表された処理フローである。 "
"(a)や(b)は比較的単純な構造の処理フローであるが、(c)のような複雑な処理フローも実現可能である。 "
"処理フローにおいて、いずれからも入力のない節点をソース節点と呼び、いずれの節点にも出力のない節点をシンク節点と呼ぶ。 "
":numref:`flow_dag.png` では、ソース節点が赤枠で示され、シンク節点が青色で示されている。 "
"ソース節点には、必ず入力データが指定されなければならす、シンク節点には必ず出力データが指定されなければならない "
"(後述するように、出力データの指定は省略できる)。 また、シンク節点の数により、処理フローの実行方法が異なり、 シンク節点が1つだけの処理フローは"
" ``run`` メンバーメソッドで、複数ある場合は ``runs`` クラスメソッドで実行する。 それぞれのメソッド詳細については「 "
":doc:`run` 」の節を参照されたい。"
msgstr ""

#: ../../mcmd/flow.rst:31
msgid "DAG(有向非循環グラフ)で表される処理フロー"
msgstr ""

#: ../../mcmd/flow.rst:34
msgid "以下では、単純な例から始め、mcmdがデータ処理フローをどのように構成していくかについて説明する。"
msgstr ""

#: ../../mcmd/flow.rst:43
msgid "暗黙の接続"
msgstr ""

#: ../../mcmd/flow.rst:44
msgid ""
"単純なデータ処理フローから始めよう。 図 :numref:`flow_base` は、「 :doc:`はじめよう<hello>` 」節の "
":numref:`hello_ope` に示したフローである。 2重リストに格納された3項目5行のデータを入力データとして、 ``mcut`` "
"メソッドにより、 ``customer`` と ``amount`` 項目のみを切り出し、 ``amount`` 項目を合計するというものである。"
msgstr ""

#: ../../mcmd/flow.rst:50
msgid "処理フローの基本例"
msgstr ""

#: ../../mcmd/flow.rst:73
msgid ""
"``<<=`` 演算子により、左辺の処理フローオブジェクトに右辺の処理メソッドが追加登録される。 左辺が ``None`` "
"の場合は、新規に処理フローオブジェクトが生成され、右辺の処理メソッドが登録される。 "
"登録順は重要で、明示的な接続関係(後述)を設定しなければ、前のメソッドの出力データが次のメソッドの入力データとして接続される。 "
"このような接続方式を **暗黙の接続** と呼ぶ。 :numref:`flow_base` では、``mcut`` の出力が ``msum`` "
"の入力として暗黙に接続される。"
msgstr ""

#: ../../mcmd/flow.rst:79
msgid ""
"そして、このように作成された処理フローの実行は ``f.run()`` のように、処理フローオブジェクト ``f`` のメンバーメソッドである "
"``run`` を呼び出せばよい。"
msgstr ""

#: ../../mcmd/flow.rst:82
msgid ""
"また、``drawModelD3`` メソッドを利用すれば処理フロー全体を視覚化することができる( "
":numref:`flow_drawModel` )。 結果は :numref:`flow_drawModelPNG` "
"に示されるように、メソッドの接続関係がグラフで描画される。 円のノードでメソッドを、四角のノードでデータを表している。 "
"また、メソッド名が薄字のものは、mcmdが実行時に裏で自動追加した処理を示しているが、ここでは無視して考えて問題ない。 処理の自動追加については「"
" :doc:`autoadd` 」の節を参照されたい。"
msgstr ""

#: ../../mcmd/flow.rst:89
msgid "処理フローの視覚化"
msgstr ""

#: ../../mcmd/flow.rst:102
msgid "視覚化された処理フロー"
msgstr ""

#: ../../mcmd/flow.rst:107
msgid "明示的な接続"
msgstr ""

#: ../../mcmd/flow.rst:108
msgid ""
"処理フローオブジェクトにおけるデータの流れを明示的に接続する方法はいくつかある。 "
"mcmdが提供する処理メソッドの多くは、入出力のための共通したパラメータを持っている。 ``i=`` および ``m=`` "
"は入力データを指定するパラメータで、 ``o=`` および ``u=`` は出力データを指定するパラメータである。 "
"データストリームの接続は、入力のパラメータに処理フローオブジェクトを指定することで実現する。 いくつかの例を見てみよう。"
msgstr ""

#: ../../mcmd/flow.rst:116
msgid "項目結合の例"
msgstr ""

#: ../../mcmd/flow.rst:117
msgid ""
":numref:`flow_share` は顧客別( ``A`` と ``B`` )の合計金額を求め、それぞれの構成比を求める処理である。 "
"1行目のフローオブジェクト ``f`` を2行目の ``msum`` の入力データに指定し( ``i=f`` )、 その処理内容を "
"``total`` という別の処理フローオブジェクトとして設定している。 ``total`` オブジェクトを4行目の ``mproduct`` "
"の参照データに指定することで( ``m=total`` )、 合計金額項目 ``totalAmount`` が結合される。 3行目の "
"``msum`` の入力データは、同じフローオブジェクト ``f`` に対する追加になるため、 1行目の ``mcut`` "
"の出力がそのまま接続される。 :numref:`flow_share.png` には、それらの接続関係が視覚化されている。 ここでも "
":doc:`自動追加<autoadd>` されたメソッドがあるが、それらは無視して構わない。"
msgstr ""

#: ../../mcmd/flow.rst:127 ../../mcmd/flow.rst:160
msgid "顧客別構成比の計算：項目の結合によるデータストリームの接続"
msgstr ""

#: ../../mcmd/flow.rst:148
msgid "項目の結合の処理フロー"
msgstr ""

#: ../../mcmd/flow.rst:150
msgid ""
"この例では、処理フローオブジェクト ``f`` における接続の多くは暗黙の接続である。 "
"オブジェクト名を変えることで、これを明示的な接続へと変更することも可能である。 :numref:`flow_explicit` にその内容を示す。"
" フロー図は、 :numref:`flow_share.png` と同様である。 :numref:`flow_share` "
"とは異なり、全てのメソッドに ``i=`` を指定することで 接続を明示的に指定しているのがわかるであろう。 なお、 ``run`` "
"で実行する対象は、シンク節点である最後に登録された処理メソッドとなる。 :numref:`flow_explicit` において、 "
"``f4.run()`` を ``f3.run()`` にすれば、 当然、 ``mprodcut`` の結果までが出力されることになる。"
msgstr ""

#: ../../mcmd/flow.rst:174
msgid "レコード併合の例"
msgstr ""

#: ../../mcmd/flow.rst:175
msgid ""
"データを種別で分割し、一方にはある処理を、他方には別の処理を付した上で両者を併合するといった処理はよく用いられる。 "
":numref:`flow_merge` はそのような処理を例示したフローである。 ``msestr`` を2回使い、顧客 ``A`` と顧客 "
"``B`` を分割し、 ``B`` のみ ``amount`` が1000以上を選択し、 分割した2つのデータを ``msum`` メソッドの "
"``i=`` パラメータ指定にて併合している。 入力パラメータ ``i=`` の指定は ``[custA,custB]`` "
"のように、処理フローオブジェクトのリストでなければならない。"
msgstr ""

#: ../../mcmd/flow.rst:182
msgid "顧客別計算結果の併合の例"
msgstr ""

#: ../../mcmd/flow.rst:204
msgid "レコード併合の処理フロー"
msgstr ""

#: ../../mcmd/flow.rst:211
msgid "redirect"
msgstr ""

#: ../../mcmd/flow.rst:212
msgid ""
":numref:`flow_merge` では、``mselstr`` を2回用いているために、``f1`` "
"の出力を2度読み込んでいることになり効率が悪い。 ``mselstr`` には条件にマッチした行の出力先を ``o=`` で指定する一方で、 "
"アンマッチの行を ``u=`` で出力することができる。 この機能を使えば、 ``mselstr`` の実行は1回で済むことになる。 ``o=``"
" の出力は次に登録されるメソッドの入力となるが、 ``u=`` を次のメソッドに接続するにはどうすればよいであろうか？ それを実現するのが、 "
"``redirect`` メソッドである。 :numref:`flow_redirect` は、:numref:`flow_merge` を "
"``redirect`` を用いて書き直したものである。 違いは4行目だけで、 ``custA.redirect(\"u\")`` によって、 "
"``custA`` に登録された最後のメソッド( ``mselstr`` )の ``u=`` パラメータを ``custB`` "
"の処理フローオブジェクトに接続することになる。 :numref:`flow_redirect.png` を見てもわかるように、 "
"``mselstr`` は1回のみ実行されており、 :numref:`flow_merge` より効率的に動作する。"
msgstr ""

#: ../../mcmd/flow.rst:223 ../../mcmd/flow.rst:245 ../../mcmd/flow.rst:347
msgid "redirectを用いた例"
msgstr ""

#: ../../mcmd/flow.rst:248
msgid "runs: 複数の出力があるフローの実行"
msgstr ""

#: ../../mcmd/flow.rst:249
msgid ""
"ここまでに扱ってきた例は、 :numref:`flow_dag.png` の(a),(b)のように、全て最終出力が1つの処理フローであった。 "
"ここでは出力が複数ある処理フローについて説明する。 :numref:`flow_multio` にそのようなフローの一例を示している。 "
"この例では、 ``mselstr`` にて、 ``customer`` 項目が ``A`` である行とそれ以外の行に分岐させ、 それぞれで "
"``amount`` 項目を合計するという処理を実行している。 分岐には、前述の ``redirect`` メソッドを使っている。 "
"まず、このように複数の最終出力があるケースの実行には、 ``runs`` クラスメソッドを利用し、 "
"引数に、最終出力を含むオブジェクトをリストで与える(例では ``nm.runs([fa,fb])`` )。 ``runs`` "
"は引数に与えられた処理フロー全てを統合し、全体の構造を識別した上で実行する。 "
"そして、全体の処理フローに登録された処理メソッドをthreadに展開し並列処理で実行される。 "
"ただし、同時にオープンできるthread数の上限等の制約があるので、詳細は「 :doc:`run` 」の節を参照されたい。"
msgstr ""

#: ../../mcmd/flow.rst:261
msgid ""
"``runs`` の返り値は、出力されたCSVファイル名のリストである。 また、出力はCSVファイルだけでなく、 ``o=リスト`` "
"のようにリストへの出力も可能である。"
msgstr ""

#: ../../mcmd/flow.rst:264
msgid "複数の出力がある処理フローの ``runs`` による実行例"
msgstr ""

#: ../../mcmd/flow.rst:292
msgid ""
"同じことを ``run`` を使っても実現は可能である。 そのコードは :numref:`flow_multio2` に示す通りである。 "
"違いは、最後の2行のみで、2つの最終出力を伴う処理オブジェクトをそれぞれ ``run`` しているのである。 "
"当然、出力結果も全く同じとなるが、違いは処理メッセージを見てもわかるように、 ``fa`` ``fb`` に共通した処理である ``mcut`` "
"と ``mselstr`` が2回実行されている。 これは、 runsが、``fa`` ``fb`` "
"両方の処理フローを統合して処理を実行する一方で、 ``run`` は、``fa`` ``fb`` "
"それぞれの入力から出力までのDAG上のパスをそれぞれで実行するため、 共通の処理メソッドも重複して実行されるのである。"
msgstr ""

#: ../../mcmd/flow.rst:301
msgid "複数の出力がある処理フローを ``run`` で実行する"
msgstr ""

#: ../../mcmd/flow.rst:330
msgid "並列処理への応用"
msgstr ""

#: ../../mcmd/flow.rst:331
msgid ""
"``runs`` を使うことで、 SIMD(Single Instruction Multiple "
"Data)型の並列処理を実現することも可能である。 "
"あらかじめ同じタイプのデータを多数用意しておき、それらのデータに同一の処理を並列で実行するというものである。 簡単な例を "
":numref:`flow_meach` に示そう。 ここでは、2つのデータ ``dat1`` と ``dat2`` を１つの配列 ``dat``"
" に格納し、 それらのデータを並列で合計処理するというものである。 データはリストで与えなくても、予め分割された多数のCSVファイルでも良い。 "
"数十万ファイルを用意して実行することも可能である。 例では、for文で、 ``msum`` のみから構成される処理フローをリスト "
"``runlist`` に登録していき、 最後に、それらの処理フローを ``nm.runs(runlist)`` にて実行している。 "
"runsは登録された全ての処理フローを解析し、 他の処理フローとつながりのない処理フローを島として確認する。 "
"そして、それらの島をthreadに配置し実行するのである。 処理フローが独立であればお互いに干渉しないとの前提で実行するため、 "
"例えば、複数の処理フローの最終ファイル名が同一であるような場合 (すなわち島が互いに干渉し合っていると)正しい結果は得られない。"
msgstr ""

#: ../../mcmd/flow.rst:380
msgid "途中の処理メソッドにo=を使うケース"
msgstr ""

#: ../../mcmd/flow.rst:381
msgid ""
"複数の出力を伴う処理フローであっても、フローが分岐するのではなく、 処理フローの途中の処理メソッドに ``o=CSVファイル名`` "
"を指定するケースでは、 その処理メソッドはシンク節点とはならないので、 ``run`` で実行可能である。 分かりやすい例を "
":numref:`flow_oooo` に示している。 内容的には意味のないことではあるが、4つの ``msetstr`` "
"で項目を1つずつ追加していっているだけである。 最後の ``msetstr`` 以外は、 ``o=`` で出力ファイル名を指定しているが、 "
"そこまでの途中経過がそれぞれのファイルに出力される。 最後の ``msetstr`` は ``o=`` を指定していないのでリストで出力される。"
msgstr ""

#: ../../mcmd/flow.rst:390
msgid "途中の処理メソッドに ``o=ファイル名`` を使う例"
msgstr ""

#: ../../mcmd/flow.rst:424
msgid ""
"これは、 ``o=`` にリストを指定しても同様である。 :numref:`flow_oooo` と同様の処理を ``o=リスト`` "
"によって書き換えたコードを :numref:`flow_oooo2` に示す。"
msgstr ""

#: ../../mcmd/flow.rst:428
msgid "途中の処理メソッドに ``o=リスト`` を使う例"
msgstr ""

#: ../../mcmd/flow.rst:453
msgid ""
"処理フローの途中で ``o=`` を指定することは、処理フローのデバッグに非常に効果的である。 "
"最終結果が思わしくないものとなってしまったとき、途中経過を確認できることは、 どこに問題があるかを探るのに大いに役立つであろう。"
msgstr ""

