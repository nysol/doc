# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, nysol
# This file is distributed under the same license as the nysol_python
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nysol_python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-23 12:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../mcmd/hello.rst:5
msgid "はじめよう"
msgstr ""

#: ../../mcmd/hello.rst:6
msgid ""
"それでは、簡単な例から始めよう。 nysol_python "
"のインストールができたら、pythonを起動して、例に従って入力しながら動作を確認していこう。"
msgstr ""

#: ../../mcmd/hello.rst:10
msgid ""
"tty(ターミナル端末）からインタプリタモード(対話モード）で、pytonを起動した場合、コマンド入力を促すプライマリプロンプト(>>>)や "
"、継続行にセカンダリプロンプト(デフォルトでは...)が表示されるが、このサイトの例では省略している。 "
"また実行結果をコメント行(#で始まる行)として示している。"
msgstr ""

#: ../../mcmd/hello.rst:14
msgid ""
"それでは、:numref:`hello_intable` に示される顧客の日別購買金額データを用いて簡単な実行例をみていこう。 "
"mcmdは下記に示すような表構造データを扱う。 現在のところは2重リストもしくはCSVのいずれかのフォーマットにより与える。"
msgstr ""

#: ../../mcmd/hello.rst:18
msgid "入力データ例:mcmdが扱う表構造データ"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "customer"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "date"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "amount"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "A"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180101"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "5200"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "B"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "800"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180102"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "3500"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180105"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "2000"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180107"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "4000"
msgstr ""

#: ../../mcmd/hello.rst:28
msgid ""
"まずは、mcmdモジュールをimportし、上記の表を二重リストとして ``dat`` 変数に格納してみよう( "
":numref:`hello_indat` )。"
msgstr ""

#: ../../mcmd/hello.rst:30
msgid "mcmdのインポートと入力データの設定"
msgstr ""

#: ../../mcmd/hello.rst:45
msgid ""
"このデータから、顧客別に合計金額を合計する処理を以下に示す。 まずは、必要となる顧客と金額の2項目(``customer`` , "
"``amount`` )のみを切り出してみよう(:numref:`hello_cutCustAmount` )。 ``mcut`` "
"がその機能を実現するメソッドで、入力データとして ``dat`` 変数を指定している( ``i=`` )。 そして続けて ``run`` "
"メソッドを指定することで ``mcut`` の処理が実行される。 mcmdでは、このような単一の機能を持ったメソッドを80以上提供しており、 "
"それらのメソッドを特に **処理メソッド** と呼ぶ。"
msgstr ""

#: ../../mcmd/hello.rst:52
msgid "必要な項目の切り出し処理"
msgstr ""

#: ../../mcmd/hello.rst:60
msgid ""
"切り出したデータについて、顧客別に金額を合計する処理は ``msum`` メソッドにより実現できる。 以下では、``mcut`` "
"に続けて、msumを ``.`` (ドット)でつなげて指定しているが、 この書き方により、``mcut`` の出力結果が、``msum`` "
"の入力として用いられることになる。 それぞれのメソッドはスレッド上で動作し、データはパイプ(FIFOキュー)によって接続されている [#f1]_。"
" 詳細は「 :doc:`flow` 」の節を参照されたい。"
msgstr ""

#: ../../mcmd/hello.rst:66
msgid "顧客別金額合計の処理"
msgstr ""

#: ../../mcmd/hello.rst:74
msgid ""
"なお、上述の2つの実行結果のリストからは項目名が省かれているがこれは仕様である [#f2]_。 "
"mcmdでは、:numref:`hello_custAmount` の例のようにメソッドを連結して段階的に処理を行うが、 "
"メソッド間を流れるデータはPythonリストではなく、テキストのバイトストリームである。 "
"そして、最後のメソッド(:numref:`hello_custAmount` の例では ``msum`` )に明示的に出力ファイル ``o=`` "
"を指定しなければ、 項目名ヘッダを省いたリストが出力されるようになっている。"
msgstr ""

#: ../../mcmd/hello.rst:80
msgid ""
"組み合わせるmcmdメソッドの数が増えると、それらのメソッドをドットで繋げていくと見にくくなる。 "
"また、途中にコメントや条件文を書いたりすることもできない。 そこで、同じ機能を ``<<=`` "
"演算子を使うことで、これらの問題を解決することができる。 :numref:`hello_ope` は、 "
":numref:`hello_custAmount` と同様の処理を ``<<=`` 演算子で書き直したものである。 変数 ``f`` "
"に次々と処理内容を追加登録し、最後に ``run`` メソッドで実行している。"
msgstr ""

#: ../../mcmd/hello.rst:86
msgid "``<<=`` 演算子を利用した例"
msgstr ""

#: ../../mcmd/hello.rst:97
msgid "複数のメソッドをより複雑に連結することも可能であり、詳細は「 :doc:`flow` 」の節を参照されたい。"
msgstr ""

#: ../../mcmd/hello.rst:99
msgid ""
"最後に、表構造のデータをpythonのネイティブコードを使って処理する例を紹介する。 "
"mcmdには、上記で紹介したようなメソッドの組み合わせで多様な処理を実現するが、 それだけでは実現困難な処理もでてくる。 "
"そのようなときは、mcmdに組み込まれている、イテレータを用いればよい。 "
"mcmdで処理した結果をシームレスにイテレータに接続することが可能である。 :numref:`hello_iterator` にその例を示す。 "
"これは :numref:`hello_ope` の結果を、( ``run`` せずに) ``for in`` のイテレータに接続したものである。 "
"このイテレータは一行ずつ読み込むイテレータで、 ``amount`` 項目を100で割った結果を出力している。 ``for in`` "
"イテレータでは、データは全て文字列として出力される。 mcmdには、 ``for in`` 以外にもいくつかのイテレータが用意されており、 "
"データ型の指定や、コンテナ型の指定、さらにはブロック単位のイテレータなど、 多様な機能が用意されている。詳細は「 :doc:`iterator` "
"」の節を参照されたい。"
msgstr ""

#: ../../mcmd/hello.rst:113
msgid "イテレータを利用した例"
msgstr ""

#: ../../mcmd/hello.rst:126
msgid ""
"正確には、処理フローオブジェクトに処理メソッド(mcutやmsum)を登録していっているだけで、最後のrunメソッドが登録された処理フローを実行している。詳しくは「"
" :doc:`処理フロー<flow>` 」の節を参照されたい。"
msgstr ""

#: ../../mcmd/hello.rst:128
msgid ""
"項目名を1要素目に出力したければ ``writelist`` 関数を用いれば実現することができる。本例では、 "
"``nm.mcut(f=\"customer,amount\",i=dat).msum(k=\"customer\",f=\"amount\").writelist(header=True).run()``"
" と書けばよい。"
msgstr ""

