# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, nysol
# This file is distributed under the same license as the nysol_python
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nysol_python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-23 12:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../mcmd/hello.rst:5
msgid "はじめよう"
msgstr "Get started"

#: ../../mcmd/hello.rst:6
msgid ""
"それでは、簡単な例から始めよう。 nysol_python "
"のインストールができたら、pythonを起動して、例に従って入力しながら動作を確認していこう。"
msgstr ""
"Let's get started with simple examples. "
"Once you have installed nysol_python, start python and enter code according to the following examples and confirm the operation. "

#: ../../mcmd/hello.rst:10
msgid ""
"tty(ターミナル端末）からインタプリタモード(対話モード）で、pytonを起動した場合、コマンド入力を促すプライマリプロンプト(>>>)や "
"、継続行にセカンダリプロンプト(デフォルトでは...)が表示されるが、このサイトの例では省略している。 "
"また実行結果をコメント行(#で始まる行)として示している。"
msgstr ""
"When you start python from the tty (a torminal）with the interpreter mode (interactive mode), "
"primary prompt (>>>) for command input, or secondary prompt (as a default) will be shown on the continuation line, "
"but those are omitted in the examples on this site. "
"Also, execution results are shown in the comment lines (the line beginning with #). "

#: ../../mcmd/hello.rst:14
msgid ""
"それでは、:numref:`hello_intable` に示される顧客の日別購買金額データを用いて簡単な実行例をみていこう。 "
"mcmdは下記に示すような表構造データを扱う。 現在のところは2重リストもしくはCSVのいずれかのフォーマットにより与える。"
msgstr ""
"Let's look at simple execution examples using data of customers' daily amount of purchase shown by :numref:`hello_intable`. "
"MCMD handles structured data table as shown below. "
"As of today, data needs to be given by either two-dimensional list or CSV format. "

#: ../../mcmd/hello.rst:18
msgid "入力データ例:mcmdが扱う表構造データ"
msgstr "data input example :Structured data table which MCMD can handle"

#: ../../mcmd/hello.rst:1
msgid "customer"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "date"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "amount"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "A"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180101"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "5200"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "B"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "800"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180102"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "3500"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180105"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "2000"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "20180107"
msgstr ""

#: ../../mcmd/hello.rst:1
msgid "4000"
msgstr ""

#: ../../mcmd/hello.rst:28
msgid ""
"まずは、mcmdモジュールをimportし、上記の表を二重リストとして ``dat`` 変数に格納してみよう( "
":numref:`hello_indat` )。"
msgstr "At first, import MCMD module and store the above table into ``dat`` variable as a two-dimensional list.( :numref:`hello_indat` ). "

#: ../../mcmd/hello.rst:30
msgid "mcmdのインポートと入力データの設定"
msgstr "Importing MCMD and setting of input data"

#: ../../mcmd/hello.rst:45
msgid ""
"このデータから、顧客別に合計金額を合計する処理を以下に示す。 まずは、必要となる顧客と金額の2項目(``customer`` , "
"``amount`` )のみを切り出してみよう(:numref:`hello_cutCustAmount` )。 ``mcut`` "
"がその機能を実現するメソッドで、入力データとして ``dat`` 変数を指定している( ``i=`` )。 そして続けて ``run`` "
"メソッドを指定することで ``mcut`` の処理が実行される。 mcmdでは、このような単一の機能を持ったメソッドを80以上提供しており、 "
"それらのメソッドを特に **処理メソッド** と呼ぶ。"
msgstr ""
"The processing to total the amount by customer using the data is shown below. "
"Let's begin with extracting the specified two necessary columns(``customer`` , ``amount`` ) (:numref:`hello_cutCustAmount` ). "
"``mcut`` is the method which can execute the function, and ``dat`` variable is specified as an input data ( ``i=`` ). "
"Then, by specifying ``run`` method, ``mcut`` processing is executed. "
"MCMD is provding more than 80 different methods having a simple function like this, and those methods are called **Processing Method**. "


#: ../../mcmd/hello.rst:52
msgid "必要な項目の切り出し処理"
msgstr "The processing of extracting necessary columns"

#: ../../mcmd/hello.rst:60
msgid ""
"切り出したデータについて、顧客別に金額を合計する処理は ``msum`` メソッドにより実現できる。 以下では、``mcut`` "
"に続けて、msumを ``.`` (ドット)でつなげて指定しているが、 この書き方により、``mcut`` の出力結果が、``msum`` "
"の入力として用いられることになる。 それぞれのメソッドはスレッド上で動作し、データはパイプ(FIFOキュー)によって接続されている [#f1]_。"
" 詳細は「 :doc:`flow` 」の節を参照されたい。"
msgstr ""
"For the extracted data, ``msum`` executes the process of calculating the total amount by customer. "
"In the following example, msum is specified after  ``mcut`` by connecting with ``.`` (dot). "
"In this format, the output of ``mcut`` is going to be used as input data of ``msum``. "
"Each method is run on a thread and data is connected by a pipe (FIFO queue) [#f1]_. "
"Please see the chapter :doc:`flow` for the detail. "

#: ../../mcmd/hello.rst:66
msgid "顧客別金額合計の処理"
msgstr "The calculation of total amount by customer"

#: ../../mcmd/hello.rst:74
msgid ""
"なお、上述の2つの実行結果のリストからは項目名が省かれているがこれは仕様である [#f2]_。 "
"mcmdでは、:numref:`hello_custAmount` の例のようにメソッドを連結して段階的に処理を行うが、 "
"メソッド間を流れるデータはPythonリストではなく、テキストのバイトストリームである。 "
"そして、最後のメソッド(:numref:`hello_custAmount` の例では ``msum`` )に明示的に出力ファイル ``o=`` "
"を指定しなければ、 項目名ヘッダを省いたリストが出力されるようになっている。"
msgstr ""
"The column names are omitted from the list of above two execution results, this is a specification [#f2]_. "
"Like the example of :numref:`hello_custAmount` , although MCMD connects methods and processes them step by step, "
"data flowing between methods is not a list of Python but a byte stream of text. "
"When a user does not specify the output file explicitly by ``o=`` as the last method ( ``msum`` in the example of :numref:`hello_custAmount` ), "
"it outputs a list without the header of column names. "

#: ../../mcmd/hello.rst:80
msgid ""
"組み合わせるmcmdメソッドの数が増えると、それらのメソッドをドットで繋げていくと見にくくなる。 "
"また、途中にコメントや条件文を書いたりすることもできない。 そこで、同じ機能を ``<<=`` "
"演算子を使うことで、これらの問題を解決することができる。 :numref:`hello_ope` は、 "
":numref:`hello_custAmount` と同様の処理を ``<<=`` 演算子で書き直したものである。 変数 ``f`` "
"に次々と処理内容を追加登録し、最後に ``run`` メソッドで実行している。"
msgstr ""
"When the number of MCMD methods to be combined increase, it becomes hard to see if these methods are connected with dots. "
"In addition, we cannot write any comments and conditional statements between them. "
"In such a case, we can solve the issue by using  ``<<=`` operator to process the same function. "
":numref:`hello_ope` is a rewrite of the same processing shown in :numref:`hello_custAmount` with the ``<<=`` operator. "
"It additionally registers contents of processing with the variable ``f`` one by one and executes it at the end by ``run`` method. "

#: ../../mcmd/hello.rst:86
msgid "``<<=`` 演算子を利用した例"
msgstr "Example of using operator ``<<=``"

#: ../../mcmd/hello.rst:97
msgid "複数のメソッドをより複雑に連結することも可能であり、詳細は「 :doc:`flow` 」の節を参照されたい。"
msgstr "It is possible to connect multiple methods more intricately. Please refer to the chapter \" :doc:`flow` \" for details. "

#: ../../mcmd/hello.rst:99
msgid ""
"最後に、表構造のデータをpythonのネイティブコードを使って処理する例を紹介する。 "
"mcmdには、上記で紹介したようなメソッドの組み合わせで多様な処理を実現するが、 それだけでは実現困難な処理もでてくる。 "
"そのようなときは、mcmdに組み込まれている、イテレータを用いればよい。 "
"mcmdで処理した結果をシームレスにイテレータに接続することが可能である。 :numref:`hello_iterator` にその例を示す。 "
"これは :numref:`hello_ope` の結果を、( ``run`` せずに) ``for in`` のイテレータに接続したものである。 "
"このイテレータは一行ずつ読み込むイテレータで、 ``amount`` 項目を100で割った結果を出力している。 ``for in`` "
"イテレータでは、データは全て文字列として出力される。 mcmdには、 ``for in`` 以外にもいくつかのイテレータが用意されており、 "
"データ型の指定や、コンテナ型の指定、さらにはブロック単位のイテレータなど、 多様な機能が用意されている。詳細は「 :doc:`iterator` "
"」の節を参照されたい。"
msgstr ""
"Lastly, we introduce an example that processes a structured data table using Python native code. "
"MCMD can realize various kind of operation by combining multiple methods as introduced above, "
"however, you will face difficulty in realizing what you wish by using only those. "
"In such a case, you can use the iterators built in MCMD. "
"It makes it possible to connect seamlessly the result processed by MCMD to the iterator. "
":numref:`hello_iterator` shows the example. "
"This connects the result of :numref:`hello_ope` (without ``run``) to the iterator of ``for in``. "
"This is the iterator that reads line by line, "
"and outputs the result of the item ``amount`` divided by 100. "
"``for in`` iterator outputs all data as a string. "
"MCMD contains some more iterators other than  ``for in`` , which have various functions such as specifying data type, specifying container type, and furthermore the iterator for block unit. "
"Please see the \" :doc:`iterator` \" for details. "

#: ../../mcmd/hello.rst:113
msgid "イテレータを利用した例"
msgstr "Example of using an iterator"

#: ../../mcmd/hello.rst:126
msgid ""
"正確には、処理フローオブジェクトに処理メソッド(mcutやmsum)を登録していっているだけで、最後のrunメソッドが登録された処理フローを実行している。詳しくは「"
" :doc:`処理フロー<flow>` 」の節を参照されたい。"
msgstr "To be exact, it only registers the operation methods (mcut, msum, etc) with the process flow object, and execute the process flow which the last run method was registered with. Please refer to the chapter \" :doc:`Processing flow<flow>` \" for detail."

#: ../../mcmd/hello.rst:128
msgid ""
"項目名を1要素目に出力したければ ``writelist`` 関数を用いれば実現することができる。本例では、 "
"``nm.mcut(f=\"customer,amount\",i=dat).msum(k=\"customer\",f=\"amount\").writelist(header=True).run()``"
" と書けばよい。"
msgstr "If you want to output the item names as the first element, you can do it with the function ``writelist`` . In the example, you only need to write  ``nm.mcut(f=\"customer,amount\",i=dat).msum(k=\"customer\",f=\"amount\").writelist(header=True).run()``."

